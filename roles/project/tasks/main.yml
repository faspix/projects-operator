---
- name: Create a namespace
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ ansible_operator_meta.name }}-{{ item.name }}"
        labels:
          app.kubernetes.io/managed-by: "projects-operator"
          faspix.com/owner: "{{ owner }}"
  loop: "{{ environments }}"

- name: Create a resource quota
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ResourceQuota
      metadata:
        namespace: "{{ ansible_operator_meta.name }}-{{ item.name }}"
        name: resource-quota
        labels:
          app.kubernetes.io/managed-by: "projects-operator"
          faspix.com/owner: "{{ owner }}"
      spec:
        hard:
          pods: "{{ item.resources.quota.pods | default(projects_operator_default_quota_pods, true) }}"
          limits.cpu: "{{ item.resources.quota.limits.cpu | default(projects_operator_default_quota_limit_cpu, true) }}"
          limits.memory: "{{ item.resources.quota.limits.memory | default(projects_operator_default_quota_limit_memory, true) }}"
          requests.cpu: "{{ item.resources.quota.requests.cpu | default(projects_operator_default_quota_request_cpu, true) }}"
          requests.memory: "{{ item.resources.quota.requests.memory | default(projects_operator_quota_default_request_memory, true) }}"
          requests.storage: "{{ item.resources.quota.requests.storage | default(projects_operator_default_quota_storage, true) }}"
  loop: "{{ environments }}"

- name: Create LimitRange
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: LimitRange
      metadata:
        name: default-limits
        namespace: "{{ ansible_operator_meta.name }}-{{ item.name }}"
        labels:
          app.kubernetes.io/managed-by: "projects-operator"
          faspix.com/owner: "{{ owner }}"
      spec:
        limits:
          - type: Container
            default:
              cpu: "{{ item.resources.defaultLimitRange.limits.cpu | default(projects_operator_default_limit_cpu, true) }}"
              memory: "{{ item.resources.defaultLimitRange.limits.memory | default(projects_operator_default_limit_memory, true) }}"
            defaultRequest:
              cpu: "{{ item.resources.defaultLimitRange.requests.cpu | default(projects_operator_default_request_cpu, true) }}"
              memory: "{{ item.resources.defaultLimitRange.requests.memory | default(projects_operator_default_request_memory, true) }}"
            max:
              cpu: "{{ item.resources.defaultLimitRange.max.cpu | default(projects_operator_default_max_cpu, true) }}"
              memory: "{{ item.resources.defaultLimitRange.max.memory | default(projects_operator_default_max_memory, true) }}"
            min: 
              cpu: "{{ item.resources.defaultLimitRange.min.cpu | default(projects_operator_default_min_cpu, true) }}"
              memory: "{{ item.resources.defaultLimitRange.min.memory | default(projects_operator_default_min_memory, true) }}"
  loop: "{{ environments }}"

- name: Create RBAC - Admins
  kubernetes.core.k8s:
    state: present
    definition:
      kind: RoleBinding
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: admin-access
        namespace: "{{ ansible_operator_meta.name }}-{{ item.name }}"
        labels:
          app.kubernetes.io/managed-by: "projects-operator"
          faspix.com/owner: "{{ owner }}"
      subjects:
        - kind: Group
          name: "{{ rbac.adminGroup }}"
          apiGroup: rbac.authorization.k8s.io
      roleRef:
        kind: ClusterRole
        name: admin
        apiGroup: rbac.authorization.k8s.io
  loop: "{{ environments }}"

- name: Create RBAC - Developers
  kubernetes.core.k8s:
    state: present
    definition:
      kind: RoleBinding
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: edit-access
        namespace: "{{ ansible_operator_meta.name }}-{{ item.name }}"
        labels:
          app.kubernetes.io/managed-by: "projects-operator"
          faspix.com/owner: "{{ owner }}"
      subjects:
        - kind: Group
          name: "{{ rbac.devGroup }}"
          apiGroup: rbac.authorization.k8s.io
      roleRef:
        kind: ClusterRole
        name: edit
        apiGroup: rbac.authorization.k8s.io
  loop: "{{ environments }}"

- name: Create RBAC - Viewers
  kubernetes.core.k8s:
    state: present
    definition:
      kind: RoleBinding
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: view-access
        namespace: "{{ ansible_operator_meta.name }}-{{ item.name }}"
        labels:
          app.kubernetes.io/managed-by: "projects-operator"
          faspix.com/owner: "{{ owner }}"
      subjects:
        - kind: Group
          name: "{{ rbac.viewerGroup }}"
          apiGroup: rbac.authorization.k8s.io
      roleRef:
        kind: ClusterRole
        name: view
        apiGroup: rbac.authorization.k8s.io
  loop: "{{ environments }}"

- name: Create default deny-all NetworkPolicy
  kubernetes.core.k8s:
    state: present
    definition:
      kind: NetworkPolicy
      apiVersion: networking.k8s.io/v1
      metadata:
        name: deny-all
        namespace: "{{ ansible_operator_meta.name }}-{{ item.name }}"
        labels:
          app.kubernetes.io/managed-by: "projects-operator"
          faspix.com/owner: "{{ owner }}"
      spec:
        podSelector: {}
        policyTypes:
          - Ingress
          - Egress
  loop: "{{ spec.environments }}"

- name: Create service account for ci cd
  kubernetes.core.k8s:
    state: present 
    definition: 
    kind: ServiceAccount
    metadata:
      name: ci-deployer
      namespace: "{{ ansible_operator_meta.name }}-{{ item.name }}"
